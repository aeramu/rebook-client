{"version":3,"sources":["src/config/graphql.js","src/components/common/Header/index.js","src/components/book/Card/index.js","src/screens/Home/index.js","src/screens/Book/Summary.js","src/screens/Book/Reference.js","src/screens/Book/index.js","src/navigation/index.js","App.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","View","style","styles","header","Text","title","subtitle","StyleSheet","create","height","backgroundColor","alignItems","alignSelf","justifyContent","fontSize","fontWeight","color","paddingTop","paddingBottom","paddingLeft","props","author","imageUrl","onPress","TouchableHighlight","underlayColor","container","Image","resizeMode","image","source","tag","numberOfLines","borderRadius","overflow","borderWidth","borderColor","width","flex","paddingRight","navigation","numColumns","Math","floor","useWindowDimensions","useQuery","GET_BOOK_LIST","variables","first","after","loading","data","Header","FlatList","key","getBookList","edges","renderItem","id","item","cardContainer","Card","coverImage","navigate","bookId","keyExtractor","margin","gql","bookID","React","useState","page","setPage","GET_BOOK_BY_ID_SUMMARY","textContainer","getBookByID","summary","text","buttonContainer","Button","disabled","totalPage","flexDirection","marginTop","GET_BOOK_BY_ID_REFERENCES","containerTitle","reference","description","url","ReferenceCard","window","open","marginLeft","marginVertical","padding","paddingHorizontal","route","GET_BOOK_BY_ID","params","Summary","Reference","RootStack","createStackNavigator","RootStackScreen","Navigator","screenOptions","headerShown","Screen","name","component","Home","Book","linking","prefixes","config","NavigationContainer","App"],"mappings":"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","file":"static/js/app.7f59c999.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nexport const client = new ApolloClient({\n  uri: 'https://rebook-server.herokuapp.com/graphql',\n  cache: new InMemoryCache()\n})","import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default () => {\n    return(\n        <View style={styles.header}>\n            <Text style={styles.title}>BiblioGig</Text>\n            <Text style={styles.subtitle}>by Coder x ISH TIBEN</Text>\n        </View>\n\n    )\n}\n\nconst styles = StyleSheet.create({\n    header: {\n      height: 100,\n      backgroundColor:\"blue\",\n      alignItems: 'stretch',\n      alignSelf:'stretch',\n      justifyContent: 'flex-start',\n    },\n    title: {\n        fontSize: 25,\n        fontWeight: 'bold',\n        color: 'white',\n        justifyContent: 'center',\n        paddingTop: 20,\n        paddingBottom: 10,\n        paddingLeft: 60,\n    },\n    subtitle:   {\n        fontSize: 10,\n        color: 'white',\n        justifyContent: 'center',\n        paddingBottom: 10,\n        paddingLeft: 60,\n    }\n  });\n\n\n","import React from 'react'\nimport { TouchableHighlight, View, Text, StyleSheet, Image} from 'react-native'\n\nexport default (props) => {\n    const {title, author, imageUrl, onPress} = props\n\n    return(\n        <TouchableHighlight\n            onPress={onPress}\n            underlayColor=\"white\"\n        >\n            <View style={styles.container}>\n                <Image\n                resizeMode='cover' \n                style={styles.image} \n                source={{ uri: imageUrl }}\n                />\n                <View style={styles.tag}>\n                    <Text style={styles.title} numberOfLines={2}>\n                        {title}\n                    </Text>\n                    <Text style={styles.subtitle} numberOfLines={1}>\n                        {author}\n                    </Text>\n                </View>\n            </View>\n        </TouchableHighlight>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'stretch',\n        justifyContent: 'flex-start', \n        borderRadius: 10,  \n        overflow:'hidden',\n        borderWidth: 0.75,\n        borderColor: 'grey',\n        width: 210,\n        height:420,\n    },\n    image: {\n        height: 320\n    },\n    tag: {\n        flex: 1,\n        backgroundColor: 'white',\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start',\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingBottom: 10,\n        paddingTop: 10,\n    },\n    title: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: 'black',\n    },\n    subtitle:   {\n        fontSize: 15,\n        color: 'grey',\n        justifyContent: 'center',\n    }\n  });\n\n\n","import React from 'react';\nimport { StyleSheet, Text, View, Button, FlatList, useWindowDimensions } from 'react-native';\nimport { useQuery, gql } from '@apollo/client'\n\nimport Header from '../../components/common/Header'\nimport Card from '../../components/book/Card'\n\nexport default ({navigation}) => {\n  const numColumns = Math.floor(useWindowDimensions().width / 250) \n\n  const { loading, data } = useQuery(GET_BOOK_LIST,{\n    variables: {\n      first: 50,\n      after: null\n    }\n  })\n\n  if (loading) {\n    return (\n      <View>\n        <Text>Loading...</Text>\n      </View>\n    )\n  }\n\n  if (!data) {\n    return (\n      <View>\n        <Text>Failed to load</Text>\n      </View>\n    )\n  }\n\n  const onCardPress = (id) => () => {\n    navigation.navigate('Book', { bookId:id })\n  }\n \n  return (\n    <View style={styles.container}>\n      <Header/>\n      <FlatList\n        key={numColumns}\n        numColumns={numColumns ? numColumns : 1}\n        data={data.getBookList.edges}\n        renderItem={({item}) => <View style={styles.cardContainer}>\n          <Card\n            title={item.title}\n            author={item.author}\n            imageUrl={item.coverImage}\n            onPress={onCardPress(item.id)}\n          />\n        </View>}\n        keyExtractor={item => item.id }\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor:\"white\",\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n  },\n  cardContainer : {\n    margin:20\n  }\n});\n\nconst GET_BOOK_LIST = gql`\n  query($first: Int! $after: String){\n    getBookList(first: $first after: $after){\n      edges{\n        id\n        title\n        author\n        coverImage\n      }\n      pageInfo{\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`","import React from 'react'\nimport {Button, View, Text, StyleSheet } from 'react-native'\n\nimport {gql, useQuery} from '@apollo/client'\n\nexport default (props) => {\n    const {bookID, style} = props\n    const [page, setPage] = React.useState(1)\n\n    const {data, loading} = useQuery(GET_BOOK_BY_ID_SUMMARY, {\n        variables:{\n            id: bookID,\n            page: page,\n        }\n    })\n\n    const onNextPress = () => {\n        setPage(page + 1)\n    }\n\n    const onPreviousPress = () => {\n        setPage(page - 1)\n    }\n\n    return (\n        <View style={style}>\n            <View style={styles.textContainer}>\n            {\n                loading\n                ? <Text>Loading...</Text>\n                : <Text>{data.getBookByID.summary.text}</Text>\n            }\n            </View>\n            <View style={styles.buttonContainer}>\n                <Button\n                    title=\"Previous\"\n                    onPress={onPreviousPress}\n                    disabled={page == 1}\n                />\n                <Text>\n                    {page + '/' + (data? data.getBookByID.summary.totalPage : 1)}\n                </Text>\n                <Button\n                    title=\"Next\"\n                    onPress={onNextPress}\n                    disabled={page >= (loading? 1 : data.getBookByID.summary.totalPage)}\n                />\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    buttonContainer:{\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        flexDirection: 'row',\n        marginTop: 40,\n    },\n    textContainer:{\n        flex:1\n    }\n});\n\nconst GET_BOOK_BY_ID_SUMMARY = gql`\n    query($id: ID!, $page: Int!){\n        getBookByID(id: $id){\n            summary(page: $page){\n                text\n                totalPage\n            }\n        }\n    }\n`","import React from 'react'\nimport { View, Text, FlatList, TouchableHighlight, StyleSheet } from 'react-native'\nimport { gql, useQuery} from '@apollo/client'\n\nexport default (props) => {\n    const {bookID, style} = props\n\n    const {data, loading} = useQuery(GET_BOOK_BY_ID_REFERENCES, {\n        variables:{\n            id: bookID,\n            first: 10,\n        }\n    })\n\n    if (loading) {\n        return (\n            <View>\n                <Text>Loading...</Text>\n            </View>\n        )\n    }\n\n    return(\n        <View style={style}>\n            <Text style={styles.containerTitle}>Point of View</Text>\n            <FlatList\n                data={data.getBookByID.reference.edges}\n                renderItem={({item}) => \n                    <ReferenceCard\n                        title={item.title}\n                        description={item.description}\n                        url={item.url}\n                    />}\n                keyExtractor={item => item.id }\n            />\n        </View>\n    )\n}\n\nconst ReferenceCard = (props) => {\n    const {title, description, url} = props\n\n    const onPress = () => {\n        window.open(url)\n    }\n\n    return(\n        <TouchableHighlight\n            underlayColor='white'\n            onPress={onPress}\n            style={styles.cardContainer}\n        >\n            <View>\n                <Text style={styles.title}>{title}</Text>\n                <Text style={styles.subtitle}>{description}</Text>\n            </View>\n        </TouchableHighlight>\n    )\n}\n\nconst styles = StyleSheet.create({\n    containerTitle: {\n        color:'grey',\n        fontSize:25,\n        fontWeight:'bold',\n        marginLeft:10,\n    },  \n    title: {\n        fontSize:20,\n        fontWeight:'bold'\n    },\n    subtitle: {\n        color:'grey'  \n    },\n    cardContainer: {\n        marginVertical:10,\n        padding:10,\n        paddingHorizontal:20,\n        borderRadius:20,\n        borderWidth:0.5,\n        borderColor:'grey'\n    }\n})\n\nconst GET_BOOK_BY_ID_REFERENCES = gql`\n    query($id: ID!, $first: Int!){\n        getBookByID(id: $id){\n            reference(first: $first){\n                edges{\n                    id\n                    title\n                    description\n                    url\n                    rating\n                }\n            }\n        }\n      }\n`","import React from 'react'\nimport { View, Text, StyleSheet, Image } from 'react-native'\n\nimport { gql, useQuery} from '@apollo/client'\n\nimport Summary from './Summary'\nimport Reference from './Reference'\nimport Header from '../../components/common/Header'\n\nexport default (props) => {\n    const { route } = props\n\n    const {data, loading} = useQuery(GET_BOOK_BY_ID, {\n        variables:{\n            id: route.params.bookId\n        }\n    })\n\n    if (loading) {\n        return (\n            <View>\n                <Text>Loading...</Text>\n            </View>\n        )\n    }\n    \n    if (!data) {\n        return (\n            <View>\n                <Text>Failed to load</Text>\n            </View>\n        )\n    }\n\n    return (\n        <View>\n            <Header/>\n            <View style={styles.container}>\n                <Image\n                style={styles.image} \n                source={{ uri: data.getBookByID.coverImage}}\n                />\n                <View style={styles.containerTitle}>\n                    <Text style={styles.title}>\n                        {data.getBookByID.title}\n                    </Text>\n                    <Text style={styles.author}>\n                        {data.getBookByID.author}\n                    </Text>\n                    <Summary\n                        bookID = {route.params.bookId} \n                        style={styles.summary}\n                    />\n                    <Reference\n                        bookID = {route.params.bookId}\n                        style = {styles.reference}\n                    />\n                </View>\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    containerTitle:{\n        alignItems:'stretch',\n        justifyContent: 'flex-start',   \n        flexDirection: 'column',\n        marginLeft: 50,\n        flex: 1,\n    },\n    container:{\n        alignItems:'stretch',\n        justifyContent: 'flex-start', \n        flexDirection: 'row',\n        padding: 50,\n        backgroundColor:'white'\n    },\n    image: {\n        width: 350,  \n        height: 500,\n        borderRadius: 10,\n    },\n    title: {\n        fontSize: 50,\n        fontWeight: 'bold',\n        color: 'black',\n    },\n    author: {\n        fontSize: 20,\n        color: 'grey',\n    },\n    summary: {\n        marginTop: 20,\n        height: 400,\n    },\n    reference: {\n        marginTop: 30,\n    }\n});\n\nconst GET_BOOK_BY_ID = gql`\n    query($id: ID!){\n        getBookByID(id: $id){\n            id\n            title\n            author\n            coverImage\n        }\n    }\n`","import React from 'react'\n\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport Home from '../screens/Home'\nimport Book from '../screens/Book'\n\nconst RootStack = createStackNavigator()\nconst RootStackScreen = () => {\n    return (\n        <RootStack.Navigator screenOptions={{ headerShown: false }}>\n            <RootStack.Screen name='Home' component={Home}/>\n            <RootStack.Screen name='Book' component={Book}/>\n        </RootStack.Navigator>\n    )\n}\n\nconst linking = {\n    prefixes: [\n        'https://aeramu.github.io/rebook-client',\n        'http://localhost:1900'\n    ],\n    config: {\n        Home: '',\n        Book: 'book/:bookId'\n    },\n};\n\nexport default () => {\n    return (\n        <NavigationContainer linking={linking}>\n            <RootStackScreen/>\n        </NavigationContainer>\n    )\n}","import React from 'react';\nimport { ApolloProvider } from '@apollo/client';\n\nimport { client } from './src/config/graphql'\nimport Navigator from './src/navigation'\n\nexport default function App() {\n  return (\n    <ApolloProvider client={client}>\n      <Navigator/>\n    </ApolloProvider>\n  )\n}\n"],"sourceRoot":""}